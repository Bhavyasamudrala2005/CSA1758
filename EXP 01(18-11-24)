AIM:
The goal of the provided code is to solve the 8-puzzle problem using the A (A-star) search algorithm*

Procedure
1. Problem Definition
The 8-puzzle problem is represented as a 3x3 grid containing tiles numbered 1 to 8 and a blank space (0).
2. Heuristic Function
The Manhattan distance is used as the heuristic to estimate the cost from the current state to the goal state.
It calculates the sum of the vertical and horizontal distances of each tile from its target position in the goal state.
3. Generating Moves
The blank space (0) can move up, down, left, or right, depending on its position.
The function generate_moves() calculates valid moves by identifying which tiles can be swapped with 0.
4. A Search Algorithm*
Open Set: A priority queue (using heapq) is used to store states, prioritized by their heuristic cost.
Closed Set: A set to keep track of visited states to prevent redundant processing.
Parent Map: A dictionary to store the parent of each state, used for reconstructing the solution path.

Code:
print("8 puzzle")
print("cost 15")
import heapq
goal_state = (1, 2, 3, 8, 0, 4, 7, 6, 5)
initial_state = (2, 8, 3, 1, 6, 4, 7, 0, 5)
def manhattan_distance(state):
    distance = 0
    for i in range(9):
        if state[i] != 0:
            goal_row = (state[i] - 1) // 3
            goal_col = (state[i] - 1) % 3
            curr_row = i // 3
            curr_col = i % 3
            distance += abs(goal_row - curr_row) + abs(goal_col - curr_col)
    return distance
def generate_moves(state):
    moves = []
    empty_index = state.index(0)
    if empty_index - 3 >= 0:
        moves.append(empty_index - 3)
    if empty_index + 3 < 9:
        moves.append(empty_index + 3)
    if empty_index % 3 != 0:
        moves.append(empty_index - 1)
    if (empty_index + 1) % 3 != 0:
        moves.append(empty_index + 1)
    return moves
def solve_puzzle(initial_state):
    open_set = [(manhattan_distance(initial_state), initial_state)]
    heapq.heapify(open_set)
    closed_set = set()
    parent_map = {initial_state: None}
    while open_set:
        _, current_state = heapq.heappop(open_set)
        if current_state == goal_state:
            path = []
            while current_state is not None:
                path.insert(0, current_state)
                current_state = parent_map[current_state]
            return path
        closed_set.add(current_state)
        moves = generate_moves(current_state)
        for move in moves:
            new_state = list(current_state)
            new_state[current_state.index(0)], new_state[move] = new_state[move], new_state[current_state.index(0)]
            new_state = tuple(new_state)
            if new_state not in closed_set:
                if (manhattan_distance(new_state), new_state) not in open_set:
                    heapq.heappush(open_set, (manhattan_distance(new_state), new_state))
                    parent_map[new_state] = current_state
solution_path = solve_puzzle(initial_state)
for step, state in enumerate(solution_path):
    print(f"Step {step}:")
    for i in range(0, 9, 3):
        print(state[i:i+3])
        print()
output:
8 puzzle
cost 15
Step 0:
(2, 8, 3)

(1, 6, 4)

(7, 0, 5)

Step 1:
(2, 8, 3)

(1, 6, 4)

(7, 5, 0)

Step 2:
(2, 8, 3)

(1, 6, 0)

(7, 5, 4)

Step 3:
(2, 8, 3)

(1, 0, 6)

(7, 5, 4)

Step 4:
(2, 0, 3)

(1, 8, 6)

(7, 5, 4)

Step 5:
(0, 2, 3)

(1, 8, 6)

(7, 5, 4)

Step 6:
(1, 2, 3)

(0, 8, 6)

(7, 5, 4)

Step 7:
(1, 2, 3)

(8, 0, 6)

(7, 5, 4)

Step 8:
(1, 2, 3)

(8, 5, 6)

(7, 0, 4)

Step 9:
(1, 2, 3)

(8, 5, 6)

(7, 4, 0)

Step 10:
(1, 2, 3)

(8, 5, 0)

(7, 4, 6)

Step 11:
(1, 2, 3)

(8, 0, 5)

(7, 4, 6)

Step 12:
(1, 2, 3)

(8, 4, 5)

(7, 0, 6)

Step 13:
(1, 2, 3)

(8, 4, 5)

(7, 6, 0)

Step 14:
(1, 2, 3)

(8, 4, 0)

(7, 6, 5)

Step 15:
(1, 2, 3)

(8, 0, 4)

(7, 6, 5)


